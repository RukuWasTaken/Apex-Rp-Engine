//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2019, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// libapx_process_chat_event
// ============================
// redirects processing as needed:
// IF message begins with "<<" , directly output the message
// ELSE, parse message


bool libapx_process_chat_event(bool testConds, bool runActions) {

	int user = EventPlayer();

	unitgroup target = UnitGroupEmpty();
	libapx_player[user].chat_msg = libapx_string_trim(EventChatMessage(false)); //Where injection of chat occurs
	// "<<" directly dumps message to OOC (if player not muted)
	if ( StringWord( libapx_player[user].chat_msg, 1) == "<<" &&  !libapx_player[user].muted ) {
		libapx_player[user].chat_msg = libapx_string_trim( StringSub(libapx_player[user].chat_msg, 3, StringLength(libapx_player[user].chat_msg)) );
		libapx_chat_print_OOC(user, libapx_player[user].chat_msg);
	}


	else if( !libapx_player[user].disabled ) {


		// if player is mouse-click spawning, set context to spawn splat
		if( libapx_player[user].is_placing_unit ) {
			UnitGroupAdd(target, libapx_player[user].spawn_splat);
		}
		else {
			target = UnitGroupSelected(user);
			target = libapx_enforce_unit_permissions(target, user);
		}

		libapx_chat_parse(libapx_player[user].chat_msg, user, target, libapx_player[user].spawningCount);





	}
	else if( !libapx_player[user].muted ){
		libapx_chat_print_OOC(user, libapx_player[user].chat_msg);
	}

	// TODO: chat message logging

	return false;
}
