//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2019, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

include "apex/engine/chat/alias.galaxy"
include "apex/engine/chat/macro.galaxy"
include "apex/engine/chat/variables.galaxy"

const string libapx_CHAT_COMMAND_DATA_TABLE_PREFIX = "libapx_command_";

// libapx_arg
// ===============
// Returns the string argument value at the index.
// Wrapper for StringWord in order to appear more descriptive in commands.
string libapx_arg(string argv, int index) {
	return StringWord(argv, index);
}



// Bracketing
// ================
// Returns the indexes
int get_start_pair(string string_to_crawl, int startpoint){
    return StringFind(string_to_crawl, "[", c_stringNoCase);
	}

int get_end_pair(string string_to_crawl, int startpoint){
    int i = 0;
		int elevation = 0;
		bool elevationToggled = false;
		string comparison;

    while(true) {
			comparison = StringSub( string_to_crawl, i + 1, i + 1 );

			if(comparison == "[") {
				elevation +=1;
				elevationToggled = true;
			}
			if (comparison == "]") {
				elevation -=1;
			}
			if (elevation == 0 && elevationToggled == true) {
				break;
			}

			i += 1;
    }
    return i + 1;
}



//within_brackets( msg, player, semicolen_index)
bool within_brackets(string string_to_check, int player, int semicolon_index) {
	string string_before = StringSub(string_to_check, 1, semicolon_index - 1);
	string string_after = StringSub(string_to_check,  semicolon_index + 1, StringLength(string_to_check));
	int i = 1;
	string temp;
	int open_i = 0;
	int close_i = 0;
	bool opened = false;
	bool closed = false;
	if ((StringFind(string_before, "[", c_stringNoCase)  != -1) && (StringFind(string_after, "]", c_stringNoCase)  != -1)) {
		//Checks if there even is a [  and ] before and after it.
		//Rolls through before text and sees if there is unmatched bracket.
		while(StringSub(string_before, i, i) != "") {
			temp = StringSub(string_before, i, i);
			if( temp == "[") {
				open_i += 1;
			}
			if( temp == "]") {
				close_i += 1;
			}
			i += 1;
		}
		if (open_i > close_i) {
			opened = true;
		}

		i = 1;
		open_i = 0;
		close_i = 0;

		while(StringSub(string_after, i, i) != "") {
			temp = StringSub(string_after, i, i);
			if( temp == "[") {
				open_i += 1;
			}
			if( temp == "]") {
				close_i += 1;
			}
			i += 1;
		}

		if (close_i > open_i) {
			closed = true;
		}
		
		if(closed && opened) {
			return true;
		}
		else {
			return false;
		}
	}
	return false;
}


string bracketSeperater = " --||&&||-- ";//Spaces around it are critical

//Grabs bracket text from specialized format
string bracketTextGrab(string bracketText, int arg) {
	int seperaterPosition;
	string outputText;
	int i  = 1;
	int player = 1;
	while( i <= arg) {
		if  (StringFind(bracketText, bracketSeperater, c_stringCase) == -1) {
			//No other arguement given
			return "";
		}
		libapx_print_output(0, bracketText);
		seperaterPosition = StringFind(bracketText, bracketSeperater, c_stringCase);
		bracketText = StringReplace(bracketText, "", 1, seperaterPosition + StringLength(bracketSeperater) - 1);
		seperaterPosition = StringFind(bracketText, bracketSeperater, c_stringCase);

		if (seperaterPosition != -1) {
			outputText = StringReplace(bracketText, "", seperaterPosition, StringLength(bracketText));
		}
		else {
			outputText = bracketText;
		}



		i += 1;
	}

	return outputText;
}

// function signature for Apex chat commands
void libapx_command_signature(int user, unitgroup u, string argv, int spawningCount, string bracketText);

//function signature for Apex commands guide entry
void libapx_command_guide_signature(string command_name);

// funcref type for Apex commands
typedef funcref<libapx_command_signature> libapx_command_type;

// funcref type for Apex commands guide
typedef funcref<libapx_command_guide_signature> libapx_command_guide;


// Table of all Apex commands:
// ===========================
// Commands are created and hardcoded/registered as an entry in the table.
// Global data table maps a function name to an index in this array:
//
//   DataTable index -> commands[index] -> command funcref
//
// Though this is an annoying double leap (map -> array -> func), easier
// to reference a command in the table instead of creating an if-elif cascade
// to match a function string name to its function reference
//
// Array length hardcoded such that num of commands registered should never
// reach command table size. If it does, increase this array size.
libapx_command_type[250] libapx_command_table;

// Counter for the next free array entry in the libapx_command_table array
int libapx_command_table_counter = 0;

// libapx_chat_command_create
// ==================
// Adds a command function to the global array of commands.
// Use data table to map command name (string) to the array index.
void libapx_chat_command_create(string command, libapx_command_type func,libapx_command_guide guideFunc) {
	DataTableSetInt(true, libapx_CHAT_COMMAND_DATA_TABLE_PREFIX + command, libapx_command_table_counter);
	libapx_command_table[libapx_command_table_counter] = func;
	libapx_command_table_counter += 1;

	guideFunc(command);
	// add command to list of commands
	libapx_settings.commands = libapx_settings.commands +  ", " + command;
}

// Max iterations for number of aliases and macros replaced by parser
// per parser function call. This is to break from infinite loops caused
// by recursive aliases or macros.
const int libapx_PARSE_LIMIT = 40000;

//Array of commands to handle with full string passing.
// ex _repeat 25 [@spawn marine;_delay 3;@modelswap penis]
//
//
//


// libapx_chat_parse
// =================
// parses a chat message string for commands (each command separated by ";" )
// built-in commands are "_alias", "macro", and "var" which affect parsing
// hence these are treated separately than all other commands
void libapx_chat_parse(string msg, int player, unitgroup target, int spawningCount) {
	string current = msg;
	string current_alias_subbed;
	string cmd_key;
	int count = 0;
	int semicolon_index;
	int next_semicolon_index;
	string bracketText;
	int pairStart;
	int pairEnd;
	bool test;
	int i;
	string current_temp;

	
	libapx_command_type func; // command ref test
	libapx_chat_parse_increment(player);
	libapx_player_parser[player][spawningCount].context = target; //Sets Target of cmd



	// manual interrupt flag to stop parsing, intialize as false
	libapx_player[player].done_parsing = false;

	while ( msg != "" && count < libapx_PARSE_LIMIT) {
		// if player done parsing flag set to true, interrupt and stop parsing
		if ( libapx_player[player].done_parsing == true ) {
			return;
		}

		// update player's chat_msg current cache
		libapx_player[player].chat_msg = msg;

		// get a chunk of the msg by finding ";" separater
		// -> to allow players to still use ";" in chat, "\;" is parsed as an escape sequence
		// -> "\;" will print out a ";" in the chat, so we must find "\;" in a message
		semicolon_index = StringFind(msg, ";", c_stringNoCase);
		while( true ) {

			if( semicolon_index ) {
				//If semicolon is within brackets, skip to next
				if( within_brackets( msg, player, semicolon_index) ) {
					next_semicolon_index = StringFind( StringSub( msg, semicolon_index + 1, StringLength(msg) ), ";", c_stringNoCase );
					if( next_semicolon_index > 0 ) {
						// must add because next_semicolon_index is relative to a substring
						semicolon_index = semicolon_index + next_semicolon_index;
						continue;
					}

					else { // at end of msg
						current = msg;
						msg = "";
						break;
					}
				}
				// if this is an escaped semicolon "\;", find the next semicolon
				if( StringSub(msg, semicolon_index - 1, semicolon_index - 1) == "\\" ) {
					next_semicolon_index = StringFind( StringSub( msg, semicolon_index + 1, StringLength(msg) ), ";", c_stringNoCase );
					if( next_semicolon_index > 0 ) {
						// must add because next_semicolon_index is relative to a substring
						semicolon_index = semicolon_index + next_semicolon_index;
						continue;
					}

					else {
						current = msg;
						msg = "";
						break;
					}
				}
				else {
					current = libapx_string_trim( StringSub(msg, 1, semicolon_index - 1) );
					msg = StringSub( msg, semicolon_index + 1, StringLength(msg));
					
					break;
				}
			}
			else { // at end of msg


				current = msg;
				msg = "";
				break;
			}

		}

		//Logic for breaking down Brackets
		//If > is the first, meaning it's a command that needs brackets, then grab them, otherwize resume parsing.
		//while there is another open bracket remianing, if so
		//pull pairs and remove
		i = 1;

		bracketText = "";
		current_temp = current;
		//if(StringSub(current_temp, 1, 1) == ">") {
			while( StringFind(current_temp, "[", c_stringNoCase) != -1 ) {
				pairStart = get_start_pair(current_temp, 0);

				if(within_brackets( current_temp, player, pairStart+1)) {
					pairEnd = get_end_pair(current_temp, 0);
					bracketText += bracketSeperater + StringSub(current_temp, pairStart + 1, pairEnd - 1);
					current_temp = StringReplace(current_temp, "", pairStart, pairEnd);
				}
				else {
					break;
				}
				i+=1;
				if (i > 10) {
					break;
					libapx_print_output(player,"Looped bracket parsing, report error to <ApexRP> Serobliss.");
				} 
			}
		//}







		// after getting current, replace escape sequence for semicolon: "\;" -> ";"
		current = StringReplaceWord(current, "\\;", ";", c_stringReplaceAll, false);
		// go no further with parsing if current string is empty
		// (this occurs if player types a string of ";;;;;")
		if( current == "" ) {
			continue;
		}

		// check if performing reserved keyword commands (alias, macro, var)
		if ( StringEqual( StringWord(current, 1), "_alias", c_stringNoCase) || StringEqual( StringWord(current, 1), "alias", c_stringNoCase) ) {
			//Bank validation
			if(!libapx_playerbank_hasloaded(player)) {
				break;
			}

			// returns true if using "alias create":
			// in this case, the rest of msg is used up AS IS, so parsing considered finished
			if( libapx_alias_command_redirect(current, player) ) {
				break;
			}
			continue; // skip OOC printing
		}
		else if ( StringEqual( StringWord(current, 1), "macro", c_stringNoCase) ) {
			//Bank validation
			if(!libapx_playerbank_hasloaded(player)) {
				break;
			}
			
			// returns true if using "macro create":
			// in this case, the rest of msg is used up AS IS, so parsing considered finished
			if( libapx_macro_command_redirect(current, player) ) {
				break;
			}
			continue; // skip OOC printing
		}
		else if ( StringEqual( StringWord(current, 1), "_variable", c_stringNoCase) || StringEqual( StringWord(current, 1), "_var", c_stringNoCase) ) {
			if(!libapx_playerbank_hasloaded(player)) {
				break;
			}
			if( libapx_variable_command_redirect(current, player) ) {
				break;
			}
		}

		// replace aliases (returns true if aliases):
		// if aliases subbed, affix to front of msg and reparse
		//Bank validation
		if(!libapx_playerbank_hasloaded(player)) {
			continue;
		}
		current_alias_subbed = libapx_alias_sub(current, player, 0);
		if( (current_alias_subbed != current) ) {

			msg = current_alias_subbed + " ;" + msg;
			count += 1;
			continue;
		}

		// if macro exists, append evaluated macro to msg and parse
		if( BankKeyExists( libapx_player[player].bank_storage, libapx_BANK_SECTION_MACRO, StringWord(current, 1) ) ) {

			msg = libapx_macro(current, player) + ";" + msg;
			count += 1;
			continue;
		}

		// TODO: Fix this
		if( BankKeyExists( libapx_player[player].bank_storage, libapx_BANK_SECTION_VARIABLE, StringWord(current, 1) ) ) {

			msg = libapx_variable_sub(current,player) +" "+ msg;
			count += 1;
			continue;
		}

		// run command (if exists and permissions for player valid)
		cmd_key = libapx_CHAT_COMMAND_DATA_TABLE_PREFIX + StringCase(StringWord(current, 1), false);
		if ( DataTableValueExists(true, cmd_key) ) {
			func = libapx_command_table[ DataTableGetInt(true, cmd_key) ];


			//Delete the bracket from current
			i = 1;
			while(bracketTextGrab(bracketText, i) != "") {
				current = StringReplace(current, "", StringFind(current, "["+bracketTextGrab(bracketText, i)+"]", c_stringNoCase), StringFind(current, "["+bracketTextGrab(bracketText, i)+"]", c_stringNoCase)+StringLength("["+bracketTextGrab(bracketText, i)+"]"));
				i+=1;
			}

			target = libapx_player_parser[player][spawningCount].context;
			func( player, target, current, spawningCount, bracketText);
		}
		else if ( !libapx_player[player].muted ) {
			libapx_chat_print_OOC(player, current);
		}
	}

	// reached parse limit
	if( count == libapx_PARSE_LIMIT ) {
		libapx_print_error(player, "Reached parse limit (recursive alias or recursive macro?)");
	}

}
